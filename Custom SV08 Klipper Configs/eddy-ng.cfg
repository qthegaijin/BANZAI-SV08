# For Eddy USB/Duo, include the mcu and temperature sensor sections.
# Omit for Eddy Coil
[mcu eddy]
# Or whatever is appropriate for CAN
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044340310A7571C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[probe_eddy_ng btt_eddy]
sensor_type: ldc1612
i2c_mcu: eddy
i2c_bus: i2c0f
samples_per_second: 500
x_offset: -18.0
y_offset: 6.0
tap_max_samples: 10


[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
#horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 400
mesh_min: 15, 15
mesh_max: 330, 330
probe_count: 25, 25
algorithm: bicubic
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

[safe_z_home]
home_xy_position: 172, 172
z_hop: 10
z_hop_speed: 25
speed: 200

###############################Macros and related################################

[gcode_macro G28]
rename_existing: G28.1
gcode:
  SET_TOOL_LED_BLUE
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    # SET_Z_FROM_PROBE
  {% endif %}
  SET_TOOL_LED_WHITE

[gcode_macro SET_Z_FROM_PROBE]
gcode:
    G28
    CLEAN_NOZZLE
    PROBE_EDDY_NG_TAP

[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  SET_GCODE_OFFSET_ORIG { rawparams }

# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
  SET_TOOL_LED_PURPLE
  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
  SET_TOOL_LED_WHITE

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SET_TOOL_LED_TEAL
    SAVE_GCODE_STATE NAME=STATE_QGL
    BED_MESH_CLEAR
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        {% if current_target_temp <= mesh_calibrate_temp %}
          M190 S{mesh_calibrate_temp}
        {% else %}
          M190 S{current_target_temp}
        {% endif %}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}
    
    # if QGL has not been done yet, correct for any major skew first
    {% if not printer.quad_gantry_level.applied %}
    _QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1      
    {% endif %}
    
    # Finish off with a low QGL for precision
    _QUAD_GANTRY_LEVEL horizontal_move_z=2
    RESTORE_GCODE_STATE NAME=STATE_QGL
    SET_TOOL_LED_WHITE
